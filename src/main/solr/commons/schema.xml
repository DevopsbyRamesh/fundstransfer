<?xml version="1.0" encoding="UTF-8" ?>
<schema name="${project.groupId}.${project.artifactId}" version="1.0">

    <types>
        <fieldtype name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true" />

        <!--
         | A text field that only splits on whitespace for exact matching of words
        -->
        <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            </analyzer>
        </fieldType>

        <!--
         | A text field that uses WordDelimiterFilter to enable splitting and matching of
         | words on case-change, alpha numeric boundaries, and non-alphanumeric chars,
         | so that a query of "wifi" or "wi fi" could match a document containing "Wi-Fi".
         | Synonyms and stopwords are customized by external files, and stemming is enabled.
         | Duplicate tokens at the same position (which may result from Stemmed Synonyms or
         | WordDelim parts) are removed.
        -->
        <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <!--
                 | Case insensitive stop word removal.
                 | enablePositionIncrements=true ensures that a 'gap' is left to
                 | allow for accurate phrase queries.
                -->
                <filter class="solr.StopFilterFactory"
                        ignoreCase="true"
                        words="stopwords.txt"
                        enablePositionIncrements="true" />
                <filter class="solr.WordDelimiterFilterFactory"
                        generateWordParts="1"
                        generateNumberParts="1"
                        catenateWords="1"
                        catenateNumbers="1"
                        catenateAll="0"
                        splitOnCaseChange="1" />
                <filter class="solr.LowerCaseFilterFactory" />
                <filter class="solr.EnglishPorterFilterFactory" protected="protwords.txt" />
                <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.WhitespaceTokenizerFactory" />
                <filter class="solr.SynonymFilterFactory"
                        synonyms="synonyms.txt"
                        ignoreCase="true"
                        expand="true" />
                <filter class="solr.StopFilterFactory"
                        ignoreCase="true"
                        words="stopwords.txt" />
                <filter class="solr.WordDelimiterFilterFactory"
                        generateWordParts="1"
                        generateNumberParts="1"
                        catenateWords="0"
                        catenateNumbers="0"
                        catenateAll="0"
                        splitOnCaseChange="1" />
                <filter class="solr.LowerCaseFilterFactory" />
                <filter class="solr.EnglishPorterFilterFactory" protected="protwords.txt" />
                <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
            </analyzer>
        </fieldType>

        <!--
         | Less flexible matching, but less false matches.  Probably not ideal for product names,
         | but may be good for SKUs.  Can insert dashes in the wrong place and still match.
        -->
        <fieldType name="textTight" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory" />
                <filter class="solr.SynonymFilterFactory"
                        synonyms="synonyms.txt"
                        ignoreCase="true"
                        expand="false" />
                <filter class="solr.StopFilterFactory"
                        ignoreCase="true"
                        words="stopwords.txt" />
                <filter class="solr.WordDelimiterFilterFactory"
                        generateWordParts="0"
                        generateNumberParts="0"
                        catenateWords="1"
                        catenateNumbers="1"
                        catenateAll="0" />
                <filter class="solr.LowerCaseFilterFactory" />
                <filter class="solr.EnglishPorterFilterFactory" protected="protwords.txt" />
                <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
            </analyzer>
        </fieldType>

        <!--
         | Setup simple analysis for spell checking
        -->
        <fieldType name="textSpell" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.StandardTokenizerFactory" />
                <filter class="solr.LowerCaseFilterFactory" />
                <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
            </analyzer>
        </fieldType>

        <!--
         | This is an example of using the KeywordTokenizer along
         | With various TokenFilterFactories to produce a sortable field
         | that does not include some properties of the source text
        -->
        <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
            <analyzer>
                <!--
                 | KeywordTokenizer does no actual tokenizing, so the entire
                 | input string is preserved as a single token
                -->
                <tokenizer class="solr.KeywordTokenizerFactory" />
                <!--
                 | The LowerCase TokenFilter does what you expect, which can be
                 | when you want your sorting to be case insensitive
                -->
                <filter class="solr.LowerCaseFilterFactory" />
                <!--
                 | The TrimFilter removes any leading or trailing whitespace
                -->
                <filter class="solr.TrimFilterFactory" />
                <!--
                 | The PatternReplaceFilter gives you the flexibility to use
                 | Java Regular expression to replace any sequence of characters
                 | matching a pattern with an arbitrary replacement string, 
                 | which may include back references to portions of the original
                 | string matched by the pattern.
                 |
                 | See the Java Regular Expression documentation for more
                 | information on pattern and replacement string syntax.
                 |
                 | http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/package-summary.html
                -->
                <filter class="solr.PatternReplaceFilterFactory"
                        pattern="([^a-z])"
                        replacement=""
                        replace="all" />
            </analyzer>
        </fieldType>

        <!--
         | since fields of this type are by default not stored or indexed, any data added to 
         | them will be ignored outright 
        --> 
        <fieldtype name="ignored" stored="false" indexed="false" class="solr.StrField" />
    </types>

    <fields>
        <field name="id" type="string" indexed="true" stored="true" multiValued="false" required="true" />
        <!--
         | add here your fields
        -->
        <dynamicField name="*" type="ignored" />
    </fields>

    <!--
     | field to use to determine and enforce document uniqueness.
    -->
    <uniqueKey>id</uniqueKey>

    <!--
     | field for the QueryParser to use when an explicit fieldname is absent
    -->
    <defaultSearchField>id</defaultSearchField>

    <!--
     | SolrQueryParser configuration: defaultOperator="AND|OR"
    -->
    <solrQueryParser defaultOperator="OR" />

</schema>
